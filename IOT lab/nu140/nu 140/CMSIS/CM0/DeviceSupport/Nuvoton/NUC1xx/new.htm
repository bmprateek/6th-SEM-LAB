<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [D:\Documents and Settings\admin\Desktop\nu 140\CMSIS\CM0\DeviceSupport\Nuvoton\NUC1xx\new.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image D:\Documents and Settings\admin\Desktop\nu 140\CMSIS\CM0\DeviceSupport\Nuvoton\NUC1xx\new.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Wed Nov 23 10:50:41 2016
<BR><P>
<H3>Maximum Stack Usage =         64 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; DrvSYS_Open &rArr; DrvSYS_GetPLLContent
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[20]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ACMP_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[27]">ADC_IRQHandler</a> from drvadc.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[b]">BOD_IRQHandler</a> from drvsys.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[1f]">CAN0_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[20]">Default_Handler</a> from startup_nuc1xx.o(.text) referenced 3 times from startup_nuc1xx.o(RESET)
 <LI><a href="#[d]">EINT0_IRQHandler</a> from drvgpio.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[e]">EINT1_IRQHandler</a> from drvgpio.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[f]">GPAB_IRQHandler</a> from drvgpio.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[10]">GPCDE_IRQHandler</a> from drvgpio.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[1d]">I2C0_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[1e]">I2C1_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[25]">I2S_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[24]">PDMA_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[22]">PS2_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[11]">PWMA_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[12]">PWMB_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[26]">PWRWU_IRQHandler</a> from drvsys.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[28]">RTC_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[2b]">Reset_Handler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[19]">SPI0_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[1c]">SPI3_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[29]">SystemInit</a> from system_nuc1xx.o(.text) referenced from startup_nuc1xx.o(.text)
 <LI><a href="#[13]">TMR0_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[14]">TMR1_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[15]">TMR2_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[16]">TMR3_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[17]">UART02_IRQHandler</a> from drvuart.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[18]">UART1_IRQHandler</a> from drvuart.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[21]">USBD_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[c]">WDT_IRQHandler</a> from startup_nuc1xx.o(.text) referenced from startup_nuc1xx.o(RESET)
 <LI><a href="#[2c]">__main</a> from __main.o(!!!main) referenced from startup_nuc1xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[30]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[75]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[76]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[31]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[77]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[35]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[78]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[79]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[80]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[81]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[82]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[83]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[84]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[85]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[86]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[87]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[88]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[89]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[3a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[8b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[8c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[8d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[8e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[8f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[90]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[91]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[32]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[34]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[92]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[36]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; DrvSYS_Open &rArr; DrvSYS_GetPLLContent
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[74]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[39]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[94]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2b]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PWMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_nuc1xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, system_nuc1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetClockDivider
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SelectHCLKSource
</UL>

<P><STRONG><a name="[29]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_nuc1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>DrvADC_Open</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>DrvADC_Close</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>DrvADC_SetADCChannel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>DrvADC_ConfigADCChannel7</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>DrvADC_SetADCInputMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>DrvADC_SetADCOperationMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>DrvADC_SetADCClkSrc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>DrvADC_SetADCDivisor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>DrvADC_EnableADCInt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[9d]"></a>DrvADC_DisableADCInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>DrvADC_EnableADCCmp0Int</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[9e]"></a>DrvADC_DisableADCCmp0Int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>DrvADC_EnableADCCmp1Int</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[9f]"></a>DrvADC_DisableADCCmp1Int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>ADC_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, drvadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DrvADC_GetConversionRate</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetPLLClockFreq
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetHCLKFreq
</UL>

<P><STRONG><a name="[a0]"></a>DrvADC_EnableExtTrigger</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>DrvADC_DisableExtTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>DrvADC_StartConvert</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>DrvADC_StopConvert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>DrvADC_IsConversionDone</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>DrvADC_GetConversionData</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>DrvADC_EnablePDMA</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>DrvADC_DisablePDMA</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>DrvADC_IsDataValid</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>DrvADC_IsDataOverrun</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>DrvADC_EnableADCCmp0</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>DrvADC_DisableADCCmp0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>DrvADC_EnableADCCmp1</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>DrvADC_DisableADCCmp1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>DrvADC_EnableSelfCalibration</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>DrvADC_IsCalibrationDone</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>DrvADC_DisableSelfCalibration</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>DrvADC_DiffModeOutputFormat</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>DrvADC_GetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>DrvSYS_GetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>DrvSYS_ReadProductID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>DrvSYS_UnlockProtectedReg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>DrvSYS_LockProtectedReg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>DrvSYS_IsProtectedRegLocked</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drvsys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Open
</UL>

<P><STRONG><a name="[b7]"></a>DrvSYS_GetResetSource</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>DrvSYS_ClearResetSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>DrvSYS_ResetIP</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>DrvSYS_ResetCPU</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>DrvSYS_ResetChip</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>DrvSYS_SelectBODVolt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>DrvSYS_SetBODFunction</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, drvsys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[bd]"></a>DrvSYS_EnableBODLowPowerMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>DrvSYS_DisableBODLowPowerMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>DrvSYS_GetBODState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>DrvSYS_EnableLowVoltReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>DrvSYS_DisableLowVoltReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>DrvSYS_EnableTemperatureSensor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>DrvSYS_DisableTemperatureSensor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>DrvSYS_EnablePOR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>DrvSYS_DisablePOR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>BOD_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drvsys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BOD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DrvSYS_SetIPClock</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, drvsys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetFreqDividerOutput
</UL>

<P><STRONG><a name="[4b]"></a>DrvSYS_SelectHCLKSource</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drvsys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvSYS_SelectHCLKSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Open
</UL>

<P><STRONG><a name="[c6]"></a>DrvSYS_SelectSysTickSource</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>DrvSYS_SelectIPClockSource</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, drvsys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[4e]"></a>DrvSYS_SetClockDivider</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, drvsys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[c7]"></a>DrvSYS_SetOscCtrl</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drvsys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWRWU_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DrvSYS_SetPowerDownWakeUpInt</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, drvsys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[c8]"></a>DrvSYS_EnterPowerDown</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>DrvSYS_SelectPLLSource</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>DrvSYS_SetPLLMode</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>DrvSYS_GetExtClockFreq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartClk
</UL>

<P><STRONG><a name="[50]"></a>DrvSYS_GetPLLContent</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, drvsys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DrvSYS_GetPLLContent
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Open
</UL>

<P><STRONG><a name="[53]"></a>DrvSYS_SetPLLContent</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, drvsys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Open
</UL>

<P><STRONG><a name="[45]"></a>DrvSYS_GetPLLClockFreq</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, drvsys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartClk
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetHCLKFreq
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_GetConversionRate
</UL>

<P><STRONG><a name="[46]"></a>DrvSYS_GetHCLKFreq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, drvsys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_GetConversionRate
</UL>

<P><STRONG><a name="[51]"></a>DrvSYS_Open</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, drvsys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DrvSYS_Open &rArr; DrvSYS_GetPLLContent
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetPLLContent
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetPLLContent
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SelectHCLKSource
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_IsProtectedRegLocked
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>DrvSYS_SetFreqDividerOutput</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, drvsys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetIPClock
</UL>

<P><STRONG><a name="[cb]"></a>DrvSYS_EnableHighPerformanceMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>DrvSYS_DisableHighPerformanceMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>DrvSYS_Delay</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drvsys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>DrvSYS_GetChipClockSourceStatus</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, drvsys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[cd]"></a>DrvSYS_GetClockSwitchStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>DrvSYS_ClearClockSwitchStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>UART02_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drvuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART02_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>DrvUART_SetRTS</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>DrvUART_Open</STRONG> (Thumb, 598 bytes, Stack size 24 bytes, drvuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartClk
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaudRateCalculator
</UL>

<P><STRONG><a name="[5b]"></a>DrvUART_Close</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, drvuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[5d]"></a>DrvUART_EnableInt</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, drvuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[5f]"></a>DrvUART_DisableInt</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, drvuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[d0]"></a>DrvUART_ClearIntFlag</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>DrvUART_GetIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>DrvUART_GetCTSInfo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>DrvUART_Read</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>DrvUART_Write</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>DrvUART_EnablePDMA</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>DrvUART_DisablePDMA</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>DrvUART_SetFnIRDA</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>DrvUART_SetFnLIN</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>DrvUART_SetFnRS485</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>DrvUART_GetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>GPAB_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drvgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPAB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPCDE_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, drvgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPCDE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EINT0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drvgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EINT0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EINT1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drvgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EINT1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DrvGPIO_Open</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, drvgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvGPIO_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LED
</UL>

<P><STRONG><a name="[db]"></a>DrvGPIO_Close</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>DrvGPIO_SetBit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drvgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvGPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LED
</UL>

<P><STRONG><a name="[dc]"></a>DrvGPIO_GetBit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>DrvGPIO_ClrBit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drvgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvGPIO_ClrBit
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>DrvGPIO_SetPortBits</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>DrvGPIO_GetPortBits</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>DrvGPIO_GetDoutBit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>DrvGPIO_GetPortDoutBits</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>DrvGPIO_SetBitMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>DrvGPIO_GetBitMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>DrvGPIO_ClrBitMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>DrvGPIO_GetPortMask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvgpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_ClrPortMask
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_SetPortMask
</UL>

<P><STRONG><a name="[60]"></a>DrvGPIO_SetPortMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drvgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_GetPortMask
</UL>

<P><STRONG><a name="[62]"></a>DrvGPIO_ClrPortMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drvgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_GetPortMask
</UL>

<P><STRONG><a name="[e4]"></a>DrvGPIO_EnableDigitalInputBit</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>DrvGPIO_DisableDigitalInputBit</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>DrvGPIO_EnableDebounce</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>DrvGPIO_DisableDebounce</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>DrvGPIO_SetDebounceTime</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>DrvGPIO_GetDebounceSampleCycle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>DrvGPIO_EnableInt</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, drvgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[66]"></a>DrvGPIO_DisableInt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, drvgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[ea]"></a>DrvGPIO_SetIntCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>DrvGPIO_EnableEINT0</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, drvgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[69]"></a>DrvGPIO_DisableEINT0</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[6a]"></a>DrvGPIO_EnableEINT1</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, drvgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[6b]"></a>DrvGPIO_DisableEINT1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[eb]"></a>DrvGPIO_GetIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>DrvGPIO_InitFunction</STRONG> (Thumb, 1904 bytes, Stack size 8 bytes, drvgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[ec]"></a>DrvGPIO_GetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drvgpio.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>Init_LED</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, proj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init_LED &rArr; DrvGPIO_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_SetBit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>main</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, proj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = main &rArr; DrvSYS_Open &rArr; DrvSYS_GetPLLContent
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LED
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_ClrBit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_SetBit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartClk
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaudRateCalculator
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetPLLContent
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetPLLClockFreq
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetHCLKFreq
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_GetConversionRate
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[38]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f3]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f4]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[f5]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drvsys.o(i.__ARM_common_switch8), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_InitFunction
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetChipClockSourceStatus
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SelectIPClockSource
</UL>

<P><STRONG><a name="[f7]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[20]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableADCCmp1Int
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableADCCmp0Int
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableADCInt
</UL>

<P><STRONG><a name="[41]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableADCCmp1Int
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableADCCmp0Int
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableADCInt
</UL>

<P><STRONG><a name="[49]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, drvsys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetPowerDownWakeUpInt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetBODFunction
</UL>

<P><STRONG><a name="[4a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetPowerDownWakeUpInt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetBODFunction
</UL>

<P><STRONG><a name="[48]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvsys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetPowerDownWakeUpInt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetBODFunction
</UL>

<P><STRONG><a name="[57]"></a>BaudRateCalculator</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, drvuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Open
</UL>

<P><STRONG><a name="[58]"></a>GetUartClk</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drvuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetExtClockFreq
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Open
</UL>

<P><STRONG><a name="[5e]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvuart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_EnableInt
</UL>

<P><STRONG><a name="[5c]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvuart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_DisableInt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Close
</UL>

<P><STRONG><a name="[64]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, drvgpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_EnableEINT1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_EnableEINT0
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_EnableInt
</UL>

<P><STRONG><a name="[65]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvgpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_EnableEINT1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_EnableEINT0
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_EnableInt
</UL>

<P><STRONG><a name="[67]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvgpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_DisableEINT1
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_DisableEINT0
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_DisableInt
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[73]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
